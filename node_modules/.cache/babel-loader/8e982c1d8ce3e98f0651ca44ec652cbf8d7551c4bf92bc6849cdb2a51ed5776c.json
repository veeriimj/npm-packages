{"ast":null,"code":"import { isValidElement } from 'react';\nimport { cloneWithRef } from '../utils/cloneWithRef';\nfunction throwIfCompositeComponentElement(element) {\n  // Custom components can no longer be wrapped directly in React DnD 2.0\n  // so that we don't need to depend on findDOMNode() from react-dom.\n  if (typeof element.type === 'string') {\n    return;\n  }\n  var displayName = element.type.displayName || element.type.name || 'the component';\n  throw new Error('Only native element nodes can now be passed to React DnD connectors.' + \"You can either wrap \".concat(displayName, \" into a <div>, or turn it into a \") + 'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n  return function () {\n    var elementOrNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    // When passed a node, call the hook straight away.\n    if (!isValidElement(elementOrNode)) {\n      var node = elementOrNode;\n      hook(node, options); // return the node so it can be chained (e.g. when within callback refs\n      // <div ref={node => connectDragSource(connectDropTarget(node))}/>\n\n      return node;\n    } // If passed a ReactElement, clone it and attach this function as a ref.\n    // This helps us achieve a neat API where user doesn't even know that refs\n    // are being used under the hood.\n\n    var element = elementOrNode;\n    throwIfCompositeComponentElement(element); // When no options are passed, use the hook directly\n\n    var ref = options ? function (node) {\n      return hook(node, options);\n    } : hook;\n    return cloneWithRef(element, ref);\n  };\n}\nexport function wrapConnectorHooks(hooks) {\n  var wrappedHooks = {};\n  Object.keys(hooks).forEach(function (key) {\n    var hook = hooks[key]; // ref objects should be passed straight through without wrapping\n\n    if (key.endsWith('Ref')) {\n      wrappedHooks[key] = hooks[key];\n    } else {\n      var wrappedHook = wrapHookToRecognizeElement(hook);\n      wrappedHooks[key] = function () {\n        return wrappedHook;\n      };\n    }\n  });\n  return wrappedHooks;\n}","map":{"version":3,"names":["isValidElement","cloneWithRef","throwIfCompositeComponentElement","element","type","displayName","name","Error","concat","wrapHookToRecognizeElement","hook","elementOrNode","arguments","length","undefined","options","node","ref","wrapConnectorHooks","hooks","wrappedHooks","Object","keys","forEach","key","endsWith","wrappedHook"],"sources":["/home/fa065132/GitHub/assessment-web/assessment-web-react/node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js"],"sourcesContent":["import { isValidElement } from 'react';\nimport { cloneWithRef } from '../utils/cloneWithRef';\n\nfunction throwIfCompositeComponentElement(element) {\n  // Custom components can no longer be wrapped directly in React DnD 2.0\n  // so that we don't need to depend on findDOMNode() from react-dom.\n  if (typeof element.type === 'string') {\n    return;\n  }\n\n  var displayName = element.type.displayName || element.type.name || 'the component';\n  throw new Error('Only native element nodes can now be passed to React DnD connectors.' + \"You can either wrap \".concat(displayName, \" into a <div>, or turn it into a \") + 'drag source or a drop target itself.');\n}\n\nfunction wrapHookToRecognizeElement(hook) {\n  return function () {\n    var elementOrNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    // When passed a node, call the hook straight away.\n    if (!isValidElement(elementOrNode)) {\n      var node = elementOrNode;\n      hook(node, options); // return the node so it can be chained (e.g. when within callback refs\n      // <div ref={node => connectDragSource(connectDropTarget(node))}/>\n\n      return node;\n    } // If passed a ReactElement, clone it and attach this function as a ref.\n    // This helps us achieve a neat API where user doesn't even know that refs\n    // are being used under the hood.\n\n\n    var element = elementOrNode;\n    throwIfCompositeComponentElement(element); // When no options are passed, use the hook directly\n\n    var ref = options ? function (node) {\n      return hook(node, options);\n    } : hook;\n    return cloneWithRef(element, ref);\n  };\n}\n\nexport function wrapConnectorHooks(hooks) {\n  var wrappedHooks = {};\n  Object.keys(hooks).forEach(function (key) {\n    var hook = hooks[key]; // ref objects should be passed straight through without wrapping\n\n    if (key.endsWith('Ref')) {\n      wrappedHooks[key] = hooks[key];\n    } else {\n      var wrappedHook = wrapHookToRecognizeElement(hook);\n\n      wrappedHooks[key] = function () {\n        return wrappedHook;\n      };\n    }\n  });\n  return wrappedHooks;\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,OAAO;AACtC,SAASC,YAAY,QAAQ,uBAAuB;AAEpD,SAASC,gCAAgCA,CAACC,OAAO,EAAE;EACjD;EACA;EACA,IAAI,OAAOA,OAAO,CAACC,IAAI,KAAK,QAAQ,EAAE;IACpC;EACF;EAEA,IAAIC,WAAW,GAAGF,OAAO,CAACC,IAAI,CAACC,WAAW,IAAIF,OAAO,CAACC,IAAI,CAACE,IAAI,IAAI,eAAe;EAClF,MAAM,IAAIC,KAAK,CAAC,sEAAsE,GAAG,sBAAsB,CAACC,MAAM,CAACH,WAAW,EAAE,mCAAmC,CAAC,GAAG,sCAAsC,CAAC;AACpN;AAEA,SAASI,0BAA0BA,CAACC,IAAI,EAAE;EACxC,OAAO,YAAY;IACjB,IAAIC,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IAC5F,IAAIG,OAAO,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;;IAEtF;IACA,IAAI,CAACZ,cAAc,CAACW,aAAa,CAAC,EAAE;MAClC,IAAIK,IAAI,GAAGL,aAAa;MACxBD,IAAI,CAACM,IAAI,EAAED,OAAO,CAAC,CAAC,CAAC;MACrB;;MAEA,OAAOC,IAAI;IACb,CAAC,CAAC;IACF;IACA;;IAGA,IAAIb,OAAO,GAAGQ,aAAa;IAC3BT,gCAAgC,CAACC,OAAO,CAAC,CAAC,CAAC;;IAE3C,IAAIc,GAAG,GAAGF,OAAO,GAAG,UAAUC,IAAI,EAAE;MAClC,OAAON,IAAI,CAACM,IAAI,EAAED,OAAO,CAAC;IAC5B,CAAC,GAAGL,IAAI;IACR,OAAOT,YAAY,CAACE,OAAO,EAAEc,GAAG,CAAC;EACnC,CAAC;AACH;AAEA,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EACxC,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrBC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,OAAO,CAAC,UAAUC,GAAG,EAAE;IACxC,IAAId,IAAI,GAAGS,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;;IAEvB,IAAIA,GAAG,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MACvBL,YAAY,CAACI,GAAG,CAAC,GAAGL,KAAK,CAACK,GAAG,CAAC;IAChC,CAAC,MAAM;MACL,IAAIE,WAAW,GAAGjB,0BAA0B,CAACC,IAAI,CAAC;MAElDU,YAAY,CAACI,GAAG,CAAC,GAAG,YAAY;QAC9B,OAAOE,WAAW;MACpB,CAAC;IACH;EACF,CAAC,CAAC;EACF,OAAON,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}