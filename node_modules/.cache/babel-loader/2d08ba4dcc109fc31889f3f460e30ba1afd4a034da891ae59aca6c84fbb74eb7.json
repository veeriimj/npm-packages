{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  questionnaireId: null,\n  questions: [],\n  previousQuestions: [],\n  userId: null,\n  userType: null,\n  jobId: null,\n  name: 'screening',\n  invocation: 1\n};\nconst screeningSlice = createSlice({\n  name: 'screeningSlice',\n  initialState,\n  reducers: {\n    addQuestion: (state, action) => {\n      state.questions = [...state.questions, ...action.payload];\n    },\n    editQuestion: (state, action) => {\n      for (let i = 0; i < state.questions.length; i++) {\n        if (state.questions[i]._id === action.payload.oldId) {\n          state.questions[i] = action.payload.data;\n        }\n      }\n    },\n    removeQuestion: (state, action) => {\n      state.questions = state.questions.filter(question => question._id !== action.payload);\n    },\n    setQuestions: (state, action) => {\n      state.questions = action.payload;\n    },\n    rearrangeQuestion: (state, action) => {\n      const {\n        id1,\n        id2\n      } = action.payload;\n      let questions = state.questions;\n      console.log(1, questions);\n      let selectedQuestion = questions[id1];\n      if (id2 < id1) {\n        questions.splice(id2, 0, selectedQuestion);\n        questions.splice(id1 + 1, 1);\n      } else {\n        questions.splice(id2 + 1, 0, selectedQuestion);\n        questions.splice(id1, 1);\n      }\n      console.log(1, questions);\n      state.questions = questions;\n    },\n    setPreviousQuestions(state, action) {\n      state.previousQuestions = action.payload;\n    },\n    setQuestionnaireId: (state, action) => {\n      state.questionnaireId = action.payload;\n    },\n    setBasicInfo: (state, action) => {\n      state.jobId = action.payload.jobId;\n      state.userId = action.payload.userId;\n      state.userType = action.payload.userType;\n    }\n  }\n});\nexport const {\n  addQuestion,\n  editQuestion,\n  removeQuestion,\n  setQuestions,\n  rearrangeQuestion,\n  setPreviousQuestions,\n  setQuestionnaireId,\n  setBasicInfo\n} = screeningSlice.actions;\nexport default screeningSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","questionnaireId","questions","previousQuestions","userId","userType","jobId","name","invocation","screeningSlice","reducers","addQuestion","state","action","payload","editQuestion","i","length","_id","oldId","data","removeQuestion","filter","question","setQuestions","rearrangeQuestion","id1","id2","console","log","selectedQuestion","splice","setPreviousQuestions","setQuestionnaireId","setBasicInfo","actions","reducer"],"sources":["/home/fa065132/GitHub/assessment-web/assessment-web-react/src/app/containers/Screening/Recruiter/slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n    questionnaireId: null,\n    questions: [],\n    previousQuestions: [],\n    userId: null,\n    userType: null,\n    jobId: null,\n    name: 'screening',\n    invocation: 1,\n};\n\nconst screeningSlice = createSlice({\n    name: 'screeningSlice',\n    initialState,\n    reducers: {\n        addQuestion: (state, action) => {\n            state.questions = [...state.questions, ...action.payload];\n        },\n\n        editQuestion: (state, action) => {\n            for (let i = 0; i < state.questions.length; i++) {\n                if (state.questions[i]._id === action.payload.oldId) {\n                    state.questions[i] = action.payload.data;\n                }\n            }\n        },\n\n        removeQuestion: (state, action) => {\n            state.questions = state.questions.filter(\n                question => question._id !== action.payload,\n            );\n        },\n\n        setQuestions: (state, action) => {\n            state.questions = action.payload;\n        },\n\n        rearrangeQuestion: (state, action) => {\n            const { id1, id2 } = action.payload;\n            let questions = state.questions;\n            console.log(1, questions);\n            let selectedQuestion = questions[id1];\n            if (id2 < id1) {\n                questions.splice(id2, 0, selectedQuestion);\n                questions.splice(id1 + 1, 1);\n            } else {\n                questions.splice(id2 + 1, 0, selectedQuestion);\n                questions.splice(id1, 1);\n            }\n            console.log(1, questions);\n\n            state.questions = questions;\n        },\n\n        setPreviousQuestions(state, action) {\n            state.previousQuestions = action.payload;\n        },\n\n        setQuestionnaireId: (state, action) => {\n            state.questionnaireId = action.payload;\n        },\n\n        setBasicInfo: (state, action) => {\n            state.jobId = action.payload.jobId;\n            state.userId = action.payload.userId;\n            state.userType = action.payload.userType;\n        },\n    },\n});\n\nexport const {\n    addQuestion,\n    editQuestion,\n    removeQuestion,\n    setQuestions,\n    rearrangeQuestion,\n    setPreviousQuestions,\n    setQuestionnaireId,\n    setBasicInfo,\n} = screeningSlice.actions;\n\nexport default screeningSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}