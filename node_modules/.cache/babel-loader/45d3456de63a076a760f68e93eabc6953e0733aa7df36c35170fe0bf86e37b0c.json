{"ast":null,"code":"var _jsxFileName = \"/home/fa065132/GitHub/assessment-web/assessment-web-react/src/app/containers/Screening/JobSeeker/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './styles.scss';\nimport { getQuestionnaire } from '../../../../services/questionnaire/getQuestionnaire';\nimport { Question } from './components/Question';\nimport { Button } from '../../../components/Button';\n// import TestPackage from 'test-package'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ScreeningJobSeeker = props => {\n  _s();\n  const {\n    seekerId,\n    associationPublished\n  } = props;\n  const INVOCATION = 1;\n  const [questionnaire, setQuestionnaire] = useState({});\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    fetchQuestionaire();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const fetchQuestionaire = async () => {\n    const params = {\n      associationPublished: associationPublished,\n      invocation: INVOCATION,\n      seeker: seekerId\n    };\n    const resp = await getQuestionnaire(seekerId, params);\n    const questionsData = resp.data.data[0].sections[0].questions;\n    setQuestions(questionsData);\n    setQuestionnaire(resp.data.data[0]);\n  };\n  const handleSubmit = () => {\n    const questionnaireId = questionnaire._id;\n    console.log(questionnaireId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobseeker-screening-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-heading\",\n      children: \"All mandatory Questions are marked with\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TestPackage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screening-questions-container\",\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        questionNum: index + 1\n      }, question._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submission-section\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        children: \"Submit Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(ScreeningJobSeeker, \"RS+RbQbTDKv4ZxIX2eQe3NHrgyE=\");\n_c = ScreeningJobSeeker;\nvar _c;\n$RefreshReg$(_c, \"ScreeningJobSeeker\");","map":{"version":3,"names":["React","useEffect","useState","getQuestionnaire","Question","Button","jsxDEV","_jsxDEV","ScreeningJobSeeker","props","_s","seekerId","associationPublished","INVOCATION","questionnaire","setQuestionnaire","questions","setQuestions","fetchQuestionaire","params","invocation","seeker","resp","questionsData","data","sections","handleSubmit","questionnaireId","_id","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","TestPackage","map","question","index","questionNum","onClick","_c","$RefreshReg$"],"sources":["/home/fa065132/GitHub/assessment-web/assessment-web-react/src/app/containers/Screening/JobSeeker/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles.scss';\nimport { getQuestionnaire } from '../../../../services/questionnaire/getQuestionnaire';\nimport { Question } from './components/Question';\nimport { Button } from '../../../components/Button';\n// import TestPackage from 'test-package'\n\nexport const ScreeningJobSeeker = (props) => {\n    const { seekerId, associationPublished } = props;\n    const INVOCATION = 1;\n\n    const [questionnaire, setQuestionnaire] = useState({});\n    const [questions, setQuestions] = useState([]);\n\n    useEffect(() => {\n        fetchQuestionaire();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);  \n    \n    \n    const fetchQuestionaire = async () => {\n        const params = {\n            associationPublished: associationPublished,\n            invocation: INVOCATION, \n            seeker: seekerId,\n        }\n\n        const resp = await getQuestionnaire(seekerId, params);\n        const questionsData = resp.data.data[0].sections[0].questions;\n        setQuestions(questionsData);\n        setQuestionnaire(resp.data.data[0]);\n    };\n\n    const handleSubmit = () => {\n        const questionnaireId = questionnaire._id;\n        console.log(questionnaireId);\n    }\n\n    return (\n        <div className='jobseeker-screening-container'>\n            <div className='container-heading'>\n                All mandatory Questions are marked with\n            </div> \n            <TestPackage />        \n            <div className='screening-questions-container'>\n                {questions.map((question, index) => (\n                    <Question key={question._id} question={question} questionNum={index+1} />\n                ))}\n            </div>\n            <div className='submission-section'>\n                <Button\n                    onClick={handleSubmit}\n                \n                >\n                    Submit Response\n                </Button>\n            </div>  \n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}