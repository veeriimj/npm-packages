{"ast":null,"code":"import { cloneElement } from 'react';\nimport { invariant } from '@react-dnd/invariant';\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else {\n    ref.current = node;\n  }\n}\nexport function cloneWithRef(element, newRef) {\n  var previousRef = element.ref;\n  invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n  if (!previousRef) {\n    // When there is no ref on the element, use the new ref directly\n    return cloneElement(element, {\n      ref: newRef\n    });\n  } else {\n    return cloneElement(element, {\n      ref: function ref(node) {\n        setRef(previousRef, node);\n        setRef(newRef, node);\n      }\n    });\n  }\n}","map":{"version":3,"names":["cloneElement","invariant","setRef","ref","node","current","cloneWithRef","element","newRef","previousRef"],"sources":["/home/fa065132/GitHub/assessment-web/assessment-web-react/node_modules/react-dnd/dist/esm/utils/cloneWithRef.js"],"sourcesContent":["import { cloneElement } from 'react';\nimport { invariant } from '@react-dnd/invariant';\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else {\n    ref.current = node;\n  }\n}\n\nexport function cloneWithRef(element, newRef) {\n  var previousRef = element.ref;\n  invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n\n  if (!previousRef) {\n    // When there is no ref on the element, use the new ref directly\n    return cloneElement(element, {\n      ref: newRef\n    });\n  } else {\n    return cloneElement(element, {\n      ref: function ref(node) {\n        setRef(previousRef, node);\n        setRef(newRef, node);\n      }\n    });\n  }\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,OAAO;AACpC,SAASC,SAAS,QAAQ,sBAAsB;AAEhD,SAASC,MAAMA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACzB,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,IAAI,CAAC;EACX,CAAC,MAAM;IACLD,GAAG,CAACE,OAAO,GAAGD,IAAI;EACpB;AACF;AAEA,OAAO,SAASE,YAAYA,CAACC,OAAO,EAAEC,MAAM,EAAE;EAC5C,IAAIC,WAAW,GAAGF,OAAO,CAACJ,GAAG;EAC7BF,SAAS,CAAC,OAAOQ,WAAW,KAAK,QAAQ,EAAE,sEAAsE,GAAG,sFAAsF,GAAG,kGAAkG,CAAC;EAEhT,IAAI,CAACA,WAAW,EAAE;IAChB;IACA,OAAOT,YAAY,CAACO,OAAO,EAAE;MAC3BJ,GAAG,EAAEK;IACP,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOR,YAAY,CAACO,OAAO,EAAE;MAC3BJ,GAAG,EAAE,SAASA,GAAGA,CAACC,IAAI,EAAE;QACtBF,MAAM,CAACO,WAAW,EAAEL,IAAI,CAAC;QACzBF,MAAM,CAACM,MAAM,EAAEJ,IAAI,CAAC;MACtB;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}